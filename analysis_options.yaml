# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  exclude:
    - '**/*.g.dart'
    - '**/*.freezed.dart'
  errors:
    invalid_annotation_target: ignore

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    always_declare_return_types: true
    annotate_overrides: true
    avoid_catching_errors: true
    avoid_double_and_int_checks: true
    avoid_empty_else: true
    avoid_init_to_null: true
    avoid_relative_lib_imports: true
    avoid_print: true
    avoid_private_typedef_functions: true
    avoid_return_types_on_setters: true
    avoid_returning_null_for_void: true
    avoid_shadowing_type_parameters: true
    avoid_types_as_parameter_names: true
    avoid_unnecessary_containers: true
    avoid_unused_constructor_parameters: true
    camel_case_extensions: true
    camel_case_types: true
    cancel_subscriptions: true
    close_sinks: true
    constant_identifier_names: true
    control_flow_in_finally: true
    directives_ordering: true
    empty_catches: true
    empty_constructor_bodies: true
    empty_statements: true
    flutter_style_todos: true
    implementation_imports: true
    collection_methods_unrelated_type: true
    no_duplicate_case_values: true
    no_logic_in_create_state: true
    non_constant_identifier_names: true
    omit_local_variable_types: false
    package_names: true
    package_prefixed_library_names: true
    prefer_collection_literals: true
    prefer_conditional_assignment: true
    prefer_const_declarations: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_contains: true
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_for_elements_to_map_fromIterable: true
    prefer_foreach: true
    prefer_generic_function_type_aliases: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_if_null_operators: true
    prefer_inlined_adds: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_is_not_operator: true
    prefer_single_quotes: true
    prefer_spread_collections: true
    prefer_typing_uninitialized_variables: true
    prefer_void_to_null: true
    recursive_getters: true
    slash_for_doc_comments: true
    sort_pub_dependencies: true
    throw_in_finally: true
    type_init_formals: true
    unnecessary_brace_in_string_interps: true
    unnecessary_getters_setters: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_statements: true
    unnecessary_string_interpolations: true
    unnecessary_lambdas: true
    unnecessary_new: true
    unnecessary_this: true
    unrelated_type_equality_checks: true
    use_function_type_syntax_for_parameters: true
    valid_regexps: true
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
